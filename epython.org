
* Introduction

The epython package provides the [[https://github.com/emin63/epython/blob/master/epython.org][epython.org]] file to help in setting
up some utilities for running python inside emacs. Org-babel files can
be turned into elisp files via something like

  =(org-babel-tangle-file "epython.org" "epython.el" "emacs-lisp")=

(which yields =epython.el=) or loaded directly via something
like =(org-babel-load-file "epython.org")=. Org files can also be
exported to or markdown files (e.g., for github =README.md= files) via 

  =M-x org-md-export-to-markdown=

(which yields =epython.md=).

One nice feature of writing elisp using org-babel is that it makes
documentation and commentary a little easier. If you are going to
contribute to epython, please edit the main epython.org file and not
generated files like =README.md=.

* Requirements

You will need to install things like flycheck, etc., for everything to
work properly.

* Usage

The main way to use =epython.org= is to place the =epython.org=
somewhere and call =(org-babel-load-file "/path/to/epython.org")= in
your emacs initialization files.

This as an old file and some more documentation is needed but it is
provided in the hope that it is still useful as is. Some useful
features of epython include:

  1. Typing =C-c v= in a python buffer will let you set
     the =python-shell-virtualenv-root= variable. This will cause
     flycheck to see checkers in your virtual env, have run-python
     (which you can call via C-c r=) use your virtual env, and so on.
  2. Typing =C-.= will push a doctest line from your python buffer
     into the the python interpreter. The easiest way to see this is
     to do the following:
     1. Open a python file.
     2. Type =C-x 1= to have only a single window open.
     3. Type =C-c r= to open a python interpreter in the other window.
     4. Put the point on a doctest line that starts with ">>>".
     5. Type =C-.=
     6. Your doctest line should get pushed into the python buffer. By
        repeating this, you can conveniently step through a doctest.
  3. Typing =C-c c= when the point is at the start of a function
     definition will auto-generate a comment string for that function.
  4. Typing =C-c y= when in a python interpreter will start the pdb
     debugger in post-mortem mode to debug the most recent exception.
  5. Typing =C-c e= in the python buffer with the point on the start
     of a doctest failure will generate an ediff showing the doctest
     mismatch.
  6. Typing =C-c p= will push the current buffer to python. This is
     useful to evaluate the buffer if it is set to run doctests with
     a line like

#+BEGIN_EXAMPLE
    ```
    if __name__ == '__main__':
        doctest.testmod()
    ```
#+END_EXAMPLE

* Other tips and tricks

You may also find =company-mode= and =company-jedi= useful for
auto-completion or you may find that they hang emacs. Those are not
python specific so they are not explicitly included here but you may
wish to install them (e.g., via something like =M-x
package-list-packages=) and then put something like

#+BEGIN_EXAMPLE
(global-company-mode 't)
(add-to-list 'company-backends 'company-jedi)
#+END_EXAMPLE

somewhere in your emacs initialization files.

* Source Code							   :noexport:
  :PROPERTIES:
  :ID:       7c2ba8ff-6aa2-4565-afe7-43f02da78991
  :END:

#+begin_src emacs-lisp  ;;; epython.el --- Provides various extra utilities to python mode.

    ;; Keywords:     python languages oop
    ;; See github site at https://github.com/emin63/epython

    (defconst epy-version "1.1"
      "Current version of epython.el.")

    ;; This software is provided as-is, without express or implied
    ;; warranty. See LICENSE file at https://github.com/emin63/epython
    ;; for licensing.

    ;;; Commentary:

    ;; This provides extra macros and utilities for editing python programs.
    ;; It is intended to be used in addition to python-mode.el.

    ;;; INSTALLATION:

    ;; To install do the following:
    ;;
    ;; 1. Drop this file into a directory on your load-path and
    ;;    byte-compile it if desired. 
    ;;
    ;; 2. Autoload this file if desired.
    ;;

    ;;; Code:

    

    (require 'python)

    (defun epy-set-pythonpath (path)
      "Set the PYTHONPATH environment variable to the given PATH.

       Settings this variable allows pylint to use the appropriate path
       when checking modules. For example, if a module you want to 
       check has a line like 

	 from foo import bar

       you should set the PYTHONPATH to the directory that is the parent
       of foo.
      "
      (interactive "D")
      (setenv "PYTHONPATH" path))

    (defun epy-set-vroot (path)
      "Set python-shell-virtualenv-root to given path.

       Settings this variable allows find-py-exe and other things to
       find executables inside your virtual env.
      "
      (interactive "D")
      (setq python-shell-virtualenv-root path))

    (defun epy-prepare-python-comment ()
      "Insert a preformatted comment header for function at point.

      When point is positioned on the line where a ''def'' statement begins and
      you execute this command, a comment header will be inserted that lists
      the inputs of your function, as well as a RETURNS field and a PURPOSE field.
      "
      (interactive)
      (save-restriction
	(push-mark (point)) (end-of-line) (setq line-end (point)) ; store line-end
	(goto-char (mark)) ; go back to where we started
	(search-forward "def " line-end) ; find function only if it is on this line
	(set-mark (point)) ; set the mark to where the function def starts
	(search-forward "(")
	(setq funcName (buffer-substring-no-properties (mark) (point)))
	(set-mark (point))
	(search-forward "):")
	(backward-char 2)    
	(setq args (buffer-substring-no-properties (mark) (point)))
	(end-of-line) 
	(insert (format "\n        \"\"\"\n\n" ))
	(set-mark (point))
	(setq argList (split-string (string-strip args) ","))
	(mapcar (lambda (argName) (if (string-match "^self:?$" argName) nil
		  (insert (format "        :param %s:        \n\n" argName)))) 
		argList)
	(insert (format "        %s\n\n        :return:\n\n"
			"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-"))
	(insert (format "        %s\n\n        PURPOSE:\n\n    \"\"\"" 
			"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-"))
	(next-line 1)
	(push-mark (point))
	(search-backward "\"\"\"")
	(search-backward "\"\"\"")
	(while (< (point) (mark))
	  (indent-for-tab-command)
	  (next-line 1))
	(end-of-line)
	(pop-mark)
	(goto-char (mark))
	(pop-mark)
	)
    )

    (defun epy-setup-my-epython-style ()
      "Setup various keys for epython style"
      (progn
	(setq-default py-split-windows-on-execute-function 
	  'split-window-horizontally)

	(local-set-key "\C-cc" 'epy-prepare-python-comment)
	(local-set-key "\C-c." 'epy-push-doctest-to-py)
	(local-set-key "\C-cb" 'epy-import-buffer)
	(local-set-key "\C-cp" 'epy-go-py)
	(local-set-key "\C-cr" 'run-python)
	(local-set-key "\C-c!" (if (eq system-type 'windows-nt)
				   'run-python 'my-run-python))
	(local-set-key "\C-cP" 'epy-set-go-py-buffer)
	(local-set-key "\C-cv" 'epy-set-vroot)
	(local-set-key "\C-c\C-p" 'epy-set-pythonpath)
	(local-set-key "\C-ci" 'epy-log-info) 
	(local-set-key "\C-cg" 'epy-get-paths)
	(local-set-key "\C-cd" 'epy-import-db)
	(local-set-key "\C-cq" 'epy-import-dq)
	)
      )

    (defun epy-setup-py-shell-keys ()
      "Setup various keys for use in the python shell."
      (progn
	(local-set-key "\C-cy" 'epy-pdb-pm)
	(local-set-key "\C-ce" 'epy-analyze-doctest-failure)
	(local-set-key "\C-cp" 'epy-go-py)
	(local-set-key "\C-ci" 'epy-log-info) 
	(local-set-key "\C-cg" 'epy-get-paths)
	))

    (add-hook 'python-mode-hook 'epy-setup-my-epython-style)
    (add-hook 'py-shell-hook 'epy-setup-py-shell-keys)
    (add-hook 'inferior-python-mode-hook 'epy-setup-py-shell-keys)
    (add-hook 'py-python-shell-mode-hook 'epy-setup-py-shell-keys)

    (defcustom epy-doctest-failure-delimiter 
      "^\\(-\\{70\\}\\)\\|\\(=\\{70\\}\\)\\|\\([*]\\{70\\}\\)"
      "Regular expression for delimiter used before and after doctest failures.

    Doctest and unittest use different deliminters
      "
      :type 'string
    )

    (defcustom epy-doctest-failure-exp-buffer "*exp*"
      "Buffer to put ''Expected:'' part of a doctest into
      "
      :type 'string
    )

    (defcustom epy-doctest-failure-got-buffer "*got*"
      "Buffer to put ''Got:'' part of a doctest into
      "
      :type 'string
    )


    (defun epy-analyze-doctest-failure ()
      "Display doctest failure via ediff.

    Point should be on or before a line starting with 
    epy-doctest-failure-delimiter when this function is called.
    "
      (interactive)
      (let ((comparison-frame nil))
	(if (get-buffer epy-doctest-failure-got-buffer)
	    (kill-buffer (get-buffer epy-doctest-failure-got-buffer)))
	(if (get-buffer epy-doctest-failure-exp-buffer)
	    (kill-buffer (get-buffer epy-doctest-failure-exp-buffer)))
	(get-buffer-create epy-doctest-failure-exp-buffer)
	(get-buffer-create epy-doctest-failure-got-buffer)
	(epy-put-failed-doctest-into-buffers
	 epy-doctest-failure-exp-buffer epy-doctest-failure-got-buffer)
	(make-frame '((name . "epy-doctest-failure-frame")))
	(select-frame-by-name "epy-doctest-failure-frame")
	(delete-other-windows)
	(switch-to-buffer epy-doctest-failure-exp-buffer)
	(split-window-vertically)
	(next-window)
	(switch-to-buffer epy-doctest-failure-got-buffer)
	(ediff-buffers epy-doctest-failure-exp-buffer
		       epy-doctest-failure-got-buffer)
	)
      )

    (defun epy-put-failed-doctest-into-buffers (expected-buffer got-buffer)
      "Helper function for epy-analyze-doctest-failure

    PRECONDITION: The point must be on line starting matching
		  epy-doctest-failure-delimiter and starting 
		  the desired doctest failure.

    This function takes the name of ''expected result'' buffer 
    and a ''got result'' buffer. It then goes through the current buffer
    looking for the results of a failed doctest run and inserts the resulting
    components in each buffer.
    "
      (save-excursion
	(let ((delimiter epy-doctest-failure-delimiter)
	      exp-piece got-piece)
	  (search-forward-regexp delimiter)
	  (next-line)
	  (move-beginning-of-line nil)
	  (search-forward-regexp "^Expected")
	  (next-line)
	  (move-beginning-of-line nil)
	  (push-mark)
	  (search-forward-regexp "^Got:")
	  (previous-line)
	  (move-end-of-line nil)
	  (setq exp-piece (buffer-substring (mark) (point)))
	  (with-current-buffer epy-doctest-failure-exp-buffer (insert exp-piece))
	  (next-line)
	  (next-line)
	  (move-beginning-of-line nil)
	  (pop-mark)
	  (push-mark)
	  (search-forward-regexp delimiter)
	  (previous-line)
	  (move-end-of-line nil)
	  (setq got-piece (buffer-substring (mark) (point)))
	  (with-current-buffer epy-doctest-failure-got-buffer (insert got-piece))
	  )
	)
      )

    (defun epy-pdb-pm ()
      "Import pdb and invoke pdb.pm() to debug most recent python error in python shell"
      (interactive)
      (insert "import pdb; pdb.pm()")
      (comint-send-input nil 't)
    )

    (defun epy-log-info ()
      "Import logging and set to logging.INFO"
      (interactive)
      (insert "import logging; logging.getLogger('').setLevel(logging.INFO)")
    )

    (defun epy-get-paths (&optional srcDir)
      "Get and insert paths for current file.

    This function gets the directory for the current file, splits it based
    on the source direcotry, and inserts a string in the current buffer
    to define localBranchPath to be the parent of the source directory and
    branchLocation to be the child of the source directory. This is useful
    for interactive python commands which need this information.
    "
      (interactive "ssrc dir (default is \"src\"): ")
      (let* ((srcDir (if (and srcDir (not (eq srcDir ""))) srcDir "src"))
	     (my-regexp (format "\\(.+\\)%s.*" srcDir))
	     (branchPath (replace-regexp-in-string my-regexp "\\1" 
						  (buffer-file-name)))
	     (my-name (replace-regexp-in-string ".*/\\(\[^/\]+\\)/*$" "\\1" 
						branchPath))
	     )
	(insert (format "localBranchPath = '%s'; branchLocation = '%s'"
			branchPath my-name))))


    (defun epy-set-go-py-buffer ()
      "Set the current buffer to be the my-main-py-buffer for the epy-go-py command"
      (interactive)
      (setq my-main-py-buffer (buffer-name))
      (message (format "Main python buffer is now %s." my-main-py-buffer))
    )

    (defun epy-go-py () 
      "Kill any existing python buffers and execute my-main-py-buffer in *Python*.

      The purpose of this command is to run a python buffer as a script. This is
      useful for buffers which execute their own doctests when executed or for
      scripts which do other useful things. 

      To set the target buffer, use the epy-set-go-py-buffer command.
      "
      (interactive)
      (if (setq py-buffer (get-buffer "*Python*"))
	  (progn
	   (kill-buffer py-buffer) 
	   (while (or (get-process py-which-bufname) (get-process "Python<1>"))
	     (message "Waiting for python to die, please be patient")
	     (kill-process (get-process py-which-bufname)(get-process "Python<1>"))
	     (list-processes) ; this seems to be necessary to clear processes
	     (sleep-for 0 10)
	     )))
      (if (setq my-py-buf (get-buffer my-main-py-buffer))
	  (switch-to-buffer my-py-buf) (error "Must set my-main-py-buffer first."))
      (delete-other-windows)
      (message "Starting python...")
      (setq runpy (python-shell-get-or-create-process
		   (format "%s %s" (executable-find python-shell-interpreter)
			   python-shell-interpreter-args)
		   1 1))
      (setq py-which-bufname (process-name runpy))
      (message (format "new python buffer is %s" py-which-bufname))
      (sit-for 0.1 t)
      ;;(other-window 1) ;; used to need to switch windows but 
      ;; newer emacs and python mode don't need that and just send the
      ;; python buffer instead which gives a syntax error
      (while (not ;; We used to use get-process but does not work on newer python-mode
	      (or (get-buffer py-which-bufname) ;; so use get-buffer for python-mode
		  (get-process py-which-bufname)) )
	(message "Waiting for python to start")
	(sleep-for 1)
	)
       (python-shell-send-buffer 1)
      )

    (defun epy-push-doctest-to-py (numTimes) 
      "Push the doctest line on the current line into python buffer.

      This command is useful when you have a doctest that you want to step 
      through manually. Put the point on the first line of the doctest,
      start the python interpreter (usually C-c !), and execute this
      command to push each line into the python buffer.
      "
      (interactive "p")
      (while (> numTimes 0)
	(beginning-of-line)
	(re-search-forward "[>\.]")     
	(forward-char 3)
	(if (looking-at "^") ;; if looking at start of new line
	    (kill-new "") ;; empty area so just empty space for thing to push
	    (progn ;; otherwise grab the full line to push to python
	      (push-mark)
	      (end-of-line)     
	      (copy-region-as-kill (mark) (point)))
	    (pop-mark)
	    (next-line))
	(beginning-of-line)
	(other-window 1)
	(yank)
	(if (eq major-mode 'term-mode)
	    (term-send-input) (comint-send-input nil 't))
	(other-window -1)
	(setq numTimes (- numTimes 1))
	)
    )

    (defun epy-import-buffer ()
      "Push an import statement for the current buffer into python."
      (interactive)
      (let ((cmd (concat "from " (substring (buffer-name) 0 -3) " import *")))
	(other-window 1)
	(insert cmd)
	(comint-send-input nil 't)
	(other-window -1)
	)
      )

  ;; Python stuff for outline mode based on python-magic

  ; require outline-magic.el by CarstenDominik found here: 
  ; http://www.astro.uva.nl/~dominik/Tools/outline-magic.el
  ; modified code here by Nikwin slightly found here: 
  ;  http://stackoverflow.com/questions/1085170/how-to-achieve-code-folding-effects-in-emacs/1085551#1085551

  (add-hook 'outline-minor-mode-hook 
	     (lambda () 
	       (require 'outline-magic)
  ))
  (add-hook 'python-mode-hook 'my-python-outline-hook)

  (defun py-outline-level ()
    (let (buffer-invisibility-spec)
      (save-excursion
	(skip-chars-forward "    ")
	(current-column))))

  (defun my-python-outline-hook ()
    (setq py-outline-regexp 
	  "^\\([ \t]*\\)\\(def\\|class\\|if\\|elif\\|else\\|while\\|for\\|try\\|except\\|with\\|'''\\|# \\)")
    (setq outline-regexp py-outline-regexp)
    (setq outline-level 'py-outline-level)

    (outline-minor-mode t)
    ;;(hide-body) ;; make it so python files opened in hidden mode
    ;;(show-paren-mode 1) ;; makes it so emacs always shows paren matching
    (local-set-key [C-tab] 'outline-cycle)
    (define-key outline-minor-mode-map [S-tab] 'indent-for-tab-command)
    (define-key outline-minor-mode-map [M-down] 'outline-move-subtree-down)
    (define-key outline-minor-mode-map [M-up] 'outline-move-subtree-up)
  )

  (provide 'python-magic)

  ;; The following does some setup work for flycheck mode

  (use-package flycheck :ensure t)        ;; make sure flycheck installed
  (global-flycheck-mode 't)  ;; turn on flycheck everywhere

  (defun find-py-exe (exe)
    "Look for EXE using the python-shell-virtualenv-root.

  We first use python-shell-calculate-exec-path to get a version of the
  exec path which uses python-shell-virtualenv-root and then use
  the 'executable-find' in there.
  "
    (if (bound-and-true-p python-shell-virtualenv-root)
	(let ((exec-path (python-shell-calculate-exec-path)))
	  (executable-find exe))
      (executable-find exe)))

  (flycheck-define-checker python-ruff
    "A Python syntax and style checker using the ruff utility.
  To override the path to the ruff executable, set
  `flycheck-python-ruff-executable'.
  See URL `http://pypi.python.org/pypi/ruff'."
    :command ("ruff"
              "check"
              "--output-format=concise"
              (eval (when buffer-file-name
                      (concat "--stdin-filename=" buffer-file-name)))
              "-")
    :standard-input t
    :error-patterns ((error line-start (file-name) ":" line ":" column ": " 
               (id (one-or-more (not (any ":")))) " " (message) line-end)
                     (warning line-start (file-name) ":" line ":" column ": "
               (id (one-or-more (not (any ":")))) " " (message) line-end))
    :modes (python-mode python-ts-mode))
    (add-to-list 'flycheck-checkers 'python-ruff)

  (provide 'flycheck-ruff)

  (defun epy-setup-flycheck ()
    "Setup flycheck to work properly with python.

  A few important things we want to do in this function inculde:

    1. Set the python interpreter correctly.
       - We call find-py-exe which should use your python-shell-virtualenv-root.
    2. Setup checkers to use
       - We use find-py-exe to get checkers from your virtual env.
       - Configure checkers wo we run first pylint then flake8.
  "

    (setq python-shell-interpreter (find-py-exe "python3"))

    (setq first-python-checker 'python-ruff) ;; fastest
    (setq flycheck-checker first-python-checker)
    (flycheck-add-next-checker first-python-checker 'python-flake8)
    (flycheck-add-next-checker 'python-flake8 'python-pylint)


    ;; Make sure executables set right
    (flycheck-set-checker-executable 'python-ruff (find-py-exe "ruff"))
    (flycheck-set-checker-executable 'python-pylint (find-py-exe "pylint"))
    (flycheck-set-checker-executable 'python-flake8 (find-py-exe "flake8"))
    )


  (defun epy-setpytool (toolname mydir)
    "Set the executable for the given TOOLNAME to MYDIR

This is helpful in configuring executables to use inside emacs.
For example, if you put a .dir-locals.el file with the following
contents in your project directory, then it will auto-set tye
flake8 and pylint executables when you visit a file under that
directory:

  ;; For python-mode set the flake8 and pylint executables to use
  ;; the venv so that flycheck works correctly

  ((python-mode . ((eval . (epy-setpytool "flake8" "par"))
                  (eval . (epy-setpytool "pylint" "par"))
		   ))
  )

This is helpful for flycheck."
    (set
     (make-local-variable
      (intern (format "flycheck-python-%s-executable" toolname)))
     (format "%s/%s/%s/venv_%s/bin/%s" (getenv "HOME") "code" mydir mydir
  	   toolname)
     )
    )

  (add-hook 'python-mode-hook 'epy-setup-flycheck)

#+end_src
